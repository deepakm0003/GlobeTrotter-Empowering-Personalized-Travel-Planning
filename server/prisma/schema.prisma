generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String  @id @default(cuid())
  name        String
  email       String  @unique
  avatar      String?
  preferences Json?
  passwordHash String?
  trips       Trip[]
  passwordResets PasswordReset[]
  googleId    String?  @unique
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model City {
  id               Int        @id @default(autoincrement())
  name             String
  country          String
  region           String?
  costIndex        Int?
  popularity       Int?
  imageUrl         String?
  description      String?
  currency         String?
  averageDailyCost Float?
  activities       Activity[]
}

model Activity {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  category    String?
  cost        Float?
  duration    Int?
  rating      Float?
  imageUrl    String?
  isBooked    Boolean @default(false)
  cityId      Int
  city        City    @relation(fields: [cityId], references: [id])
}

model Trip {
  id                 String   @id @default(cuid())
  name               String
  description        String?
  coverPhoto         String?
  startDate          DateTime
  endDate            DateTime
  destinationCity    String
  destinationCountry String
  totalBudget        Float?
  estimatedCost      Float?
  isPublic           Boolean  @default(false)
  userId             String?
  user               User?    @relation(fields: [userId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  budgetItems        BudgetItem[]
}

model BudgetItem {
  id          String   @id @default(cuid())
  tripId      String
  category    String   // transport, accommodation, activities, meals, other
  description String
  amount      Float
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
}
